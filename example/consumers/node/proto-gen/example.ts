// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.8
// source: example.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface GetSubtotalRequest {
  products: Product[];
}

export interface GetSubtotalResponse {
  subtotal: number;
}

export interface Product {
  name?: string | undefined;
  price: number;
  category?: Category | undefined;
}

export interface Category {
  id?: number | undefined;
  name: string;
}

function createBaseGetSubtotalRequest(): GetSubtotalRequest {
  return { products: [] };
}

export const GetSubtotalRequest: MessageFns<GetSubtotalRequest> = {
  encode(message: GetSubtotalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSubtotalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSubtotalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSubtotalRequest {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetSubtotalRequest): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSubtotalRequest>, I>>(base?: I): GetSubtotalRequest {
    return GetSubtotalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSubtotalRequest>, I>>(object: I): GetSubtotalRequest {
    const message = createBaseGetSubtotalRequest();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSubtotalResponse(): GetSubtotalResponse {
  return { subtotal: 0 };
}

export const GetSubtotalResponse: MessageFns<GetSubtotalResponse> = {
  encode(message: GetSubtotalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subtotal !== 0) {
      writer.uint32(9).double(message.subtotal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSubtotalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSubtotalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.subtotal = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSubtotalResponse {
    return { subtotal: isSet(object.subtotal) ? globalThis.Number(object.subtotal) : 0 };
  },

  toJSON(message: GetSubtotalResponse): unknown {
    const obj: any = {};
    if (message.subtotal !== 0) {
      obj.subtotal = message.subtotal;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSubtotalResponse>, I>>(base?: I): GetSubtotalResponse {
    return GetSubtotalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSubtotalResponse>, I>>(object: I): GetSubtotalResponse {
    const message = createBaseGetSubtotalResponse();
    message.subtotal = object.subtotal ?? 0;
    return message;
  },
};

function createBaseProduct(): Product {
  return { name: undefined, price: 0, category: undefined };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    if (message.category !== undefined) {
      Category.encode(message.category, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.category = Category.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      category: isSet(object.category) ? Category.fromJSON(object.category) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.category !== undefined) {
      obj.category = Category.toJSON(message.category);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.name = object.name ?? undefined;
    message.price = object.price ?? 0;
    message.category = (object.category !== undefined && object.category !== null)
      ? Category.fromPartial(object.category)
      : undefined;
    return message;
  },
};

function createBaseCategory(): Category {
  return { id: undefined, name: "" };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Category {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Category): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Category>, I>>(base?: I): Category {
    return Category.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Category>, I>>(object: I): Category {
    const message = createBaseCategory();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    return message;
  },
};

export type ExampleServiceService = typeof ExampleServiceService;
export const ExampleServiceService = {
  getSubtotal: {
    path: "/ExampleService/GetSubtotal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSubtotalRequest): Buffer => Buffer.from(GetSubtotalRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetSubtotalRequest => GetSubtotalRequest.decode(value),
    responseSerialize: (value: GetSubtotalResponse): Buffer => Buffer.from(GetSubtotalResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetSubtotalResponse => GetSubtotalResponse.decode(value),
  },
} as const;

export interface ExampleServiceServer extends UntypedServiceImplementation {
  getSubtotal: handleUnaryCall<GetSubtotalRequest, GetSubtotalResponse>;
}

export interface ExampleServiceClient extends Client {
  getSubtotal(
    request: GetSubtotalRequest,
    callback: (error: ServiceError | null, response: GetSubtotalResponse) => void,
  ): ClientUnaryCall;
  getSubtotal(
    request: GetSubtotalRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetSubtotalResponse) => void,
  ): ClientUnaryCall;
  getSubtotal(
    request: GetSubtotalRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetSubtotalResponse) => void,
  ): ClientUnaryCall;
}

export const ExampleServiceClient = makeGenericClientConstructor(
  ExampleServiceService,
  "ExampleService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ExampleServiceClient;
  service: typeof ExampleServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
